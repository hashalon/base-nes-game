namespace nes {
    namespace ppu {
        namespace oam {
            extern writeonly address @ 0x2003 : u8;
            extern var data @ 0x2004 : u8;
            extern writeonly dma @ 0x4014 : u8;

            let ATTRIBUTE_VFLIP = 0x80;
            let ATTRIBUTE_HFLIP = 0x40;
            let ATTRIBUTE_BEHIND = 0x20;
            let ATTRIBUTE_PALETTE_0 = 0x0;
            let ATTRIBUTE_PALETTE_1 = 0x1;
            let ATTRIBUTE_PALETTE_2 = 0x2;
            let ATTRIBUTE_PALETTE_3 = 0x3;
            let ATTRIBUTE_PALETTE_MASK = 0x3;

            let SPRITE_SIZE = 4;
            let SPRITE_COUNT = 64;
            let SPRITE_SCANLINE_LIMIT = 8;
        }

        extern writeonly control @ 0x2000 : u8;
        let CONTROL_NMI = 0x80;
        let CONTROL_OBJ_8x16 = 0x20;
        let CONTROL_OBJ_8x8 = 0x00;
        let CONTROL_BG_PATTERN_1 = 0x10;
        let CONTROL_BG_PATTERN_0 = 0x00;
        let CONTROL_OBJ_PATTERN_1 = 0x08;
        let CONTROL_OBJ_PATTERN_0 = 0x00;
        let CONTROL_VRAM_INCREMENT_32 = 0x04;
        let CONTROL_VRAM_INCREMENT_1 = 0x00;
        let CONTROL_NAMETABLE_0 = 0x00;
        let CONTROL_NAMETABLE_1 = 0x01;
        let CONTROL_NAMETABLE_2 = 0x02;
        let CONTROL_NAMETABLE_3 = 0x03;
        let CONTROL_NAMETABLE_MASK = 0x03;

        extern writeonly mask @ 0x2001 : u8;
        let MASK_INTENSIFY_B = 0x80;
        let MASK_INTENSIFY_G = 0x40;
        let MASK_INTENSIFY_R = 0x20;                
        let MASK_RENDER_OBJ = 0x10;
        let MASK_RENDER_BG = 0x08;
        let MASK_LEFTMOST_OBJ = 0x04;
        let MASK_LEFTMOST_BG = 0x02;
        let MASK_GREYSCALE = 0x01;

        extern const status @ 0x2002 : u8;
        let STATUS_VBLANK_MASK = 0x80;
        let STATUS_SPRITE_ZERO_HIT_MASK = 0x40;
        let STATUS_SPRITE_OVERFLOW = 0x20;
        let STATUS_VBLANK_BIT = 7;
        let STATUS_SPRITE_ZERO_HIT_BIT = 6;

        extern writeonly scroll @ 0x2005 : u8;

        extern writeonly address @ 0x2006 : u8;
        let ADDRESS_PATTERN_DATA = 0x0000;
        let ADDRESS_PATTERN_0 = 0x0000;
        let ADDRESS_PATTERN_1 = 0x1000;
        let PATTERN_SIZE = 0x1000;
        let PATTERN_COUNT = 2;

        let ADDRESS_NAMETABLE_DATA = 0x2000;
        let ADDRESS_NAMETABLE_0 = 0x2000;
        let ADDRESS_NAMETABLE_1 = 0x2400;
        let ADDRESS_NAMETABLE_2 = 0x2800;
        let ADDRESS_NAMETABLE_3 = 0x2C00;
        let NAMETABLE_SIZE = 0x400;
        let NAMETABLE_COUNT = 4;
        let NAMETABLE_SIZE_TILE_MAP = 0x3C0;
        let NAMETABLE_SIZE_ATTRIBUTE_MAP = 0x40;
        let NAMETABLE_OFFSET_TILE_MAP = 0;
        let NAMETABLE_OFFSET_ATTRIBUTE_MAP = 0x3C0;
        let NAMETABLE_WIDTH_TILE_MAP = 32;
        let NAMETABLE_HEIGHT_TILE_MAP = 30;
        let NAMETABLE_WIDTH_ATTRIBUTE_MAP = 8;
        let NAMETABLE_HEIGHT_ATTRIBUTE_MAP = 8; // NOTE: row 7 only contains attributes in the top half.

        let ADDRESS_PALETTE_DATA = 0x3F00;
        let ADDRESS_PALETTE_BG_0 = 0x3F00;
        let ADDRESS_PALETTE_BG_1 = 0x3F04;
        let ADDRESS_PALETTE_BG_2 = 0x3F08;
        let ADDRESS_PALETTE_BG_3 = 0x3F0C;
        let ADDRESS_PALETTE_OBJ_0 = 0x3F10;
        let ADDRESS_PALETTE_OBJ_1 = 0x3F14;
        let ADDRESS_PALETTE_OBJ_2 = 0x3F18;
        let ADDRESS_PALETTE_OBJ_3 = 0x3F1C;
        let PALETTE_SIZE = 4;
        let PALETTE_COUNT = 8;
        let PALETTE_BG_COUNT = 4;
        let PALETTE_OBJ_COUNT = 4;

        let SCREEN_WIDTH = 256;
        let SCREEN_HEIGHT = 240;

        extern var data @ 0x2007 : u8;    
    }

    namespace apu {
        namespace pulse {
            let CONTROL_DUTY_MASK = 0xC0;
            let CONTROL_DUTY_SHIFT = 6;
            let CONTROL_LENGTH_COUNTER_DISABLE = 0x20;
            let CONTROL_VOLUME_CONSTANT = 0x10;
            let CONTROL_VOLUME_ENVELOPE_MASK = 0x0F;

            let SWEEP_ENABLE_MASK = 0x80;
            let SWEEP_PERIOD_MASK = 0x70;
            let SWEEP_PERIOD_SHIFT = 4;
            let SWEEP_NEGATE = 0x08;
            let SWEEP_SHIFT_MASK = 0x03;

            let HIGH_LENGTH_MASK = 0xF8;
            let HIGH_LENGTH_SHIFT = 3;
            let HIGH_FREQUENCY_MASK = 0x03;
        }

        namespace pulse1 {
            extern writeonly control @ 0x4000 : u8;
            extern writeonly sweep @ 0x4001 : u8;
            extern writeonly low @ 0x4002 : u8;
            extern writeonly high @ 0x4003 : u8;
        }
        
        namespace pulse2 {
            extern writeonly control @ 0x4004 : u8;
            extern writeonly sweep @ 0x4005 : u8;
            extern writeonly low @ 0x4006 : u8;
            extern writeonly high @ 0x4007 : u8;
        }
        
        namespace triangle {
            extern writeonly control @ 0x4008 : u8;
            let CONTROL_LINEAR_COUNTER_ENABLE = 0x80;

            extern writeonly low @ 0x400A : u8;
            extern writeonly high @ 0x400B : u8;
            let HIGH_LENGTH_MASK = 0xF8;
            let HIGH_LENGTH_SHIFT = 3;
            let HIGH_FREQUENCY_MASK = 0x03;            
        }
        
        namespace noise {
            extern writeonly control @ 0x400C : u8;
            let CONTROL_LENGTH_COUNTER_DISABLE = 0x20;
            let CONTROL_VOLUME_CONSTANT = 0x10;
            let CONTROL_VOLUME_ENVELOPE_MASK = 0x0F;

            extern writeonly pattern @ 0x400E : u8;
            let PATTERN_PERIOD_MASK = 0x0F;
            let PATTERN_DUTY = 0x80;

            extern writeonly length @ 0x400F : u8;
            let LENGTH_MASK = 0xF8;
            let LENGTH_SHIFT = 3;
        }

        namespace dmc {
            extern writeonly control @ 0x4010 : u8;
            let CONTROL_IRQ_ENABLE = 0x80;
            let CONTROL_LOOP = 0x40;
            let CONTROL_FREQUENCY_MASK = 0x0F;

            extern writeonly counter @ 0x4011 : u8;
            let COUNTER_MASK = 0x7F;

            extern writeonly address @ 0x4012 : u8;
            extern writeonly length @ 0x4013 : u8;
        }

        // Enabled channels.
        extern writeonly enable @ 0x4015 : u8;
        // DMC is enabled.
        let ENABLE_DMC = 0x10;        
        // Noise is enabled
        let ENABLE_NOISE = 0x08;
        // Triangle is enabled
        let ENABLE_TRIANGLE = 0x04;
        // Pulse 2 is enabled
        let ENABLE_PULSE2 = 0x02;
        // Pulse 1 is enabled
        let ENABLE_PULSE1 = 0x01;
        
        // APU status register.
        extern const status @ 0x4015 : u8;
        // Mask of whether or not DMC interrupt is active.
        let STATUS_DMC_IRQ_MASK = 0x80;
        // Bit index of whether or not DMC interrupt is active.
        let STATUS_DMC_IRQ_BIT = 7;        
        // Mask of whether or not frame-counter interrupt is active.
        let STATUS_FRAME_IRQ_MASK = 0x40;    
        // Bit index of whether or not frame-counter interrupt is active.
        let STATUS_FRAME_IRQ_BIT = 6;
        // Mask of possible enabled channels.
        let STATUS_ENABLE_MASK = 0x1F;
        // DMC is enabled
        let STATUS_DMC_ENABLED = 0x10;
        // Noise is enabled
        let STATUS_NOISE_ENABLED = 0x08;
        // Triangle is enabled
        let STATUS_TRIANGLE_ENABLED = 0x04;
        // Pulse 2 is enabled
        let STATUS_PULSE2_ENABLED = 0x02;
        // Pulse 1 is enabled
        let STATUS_PULSE1_ENABLED = 0x01;
        
        // Frame counter.
        extern writeonly frame_counter @ 0x4017 : u8;
        // Disable frame-counter interrupts.
        let FRAME_COUNTER_IRQ_DISABLE = 0x40;
        // Four-step mode (faster, allows frame-counter interrupt if not disabled)
        let FRAME_COUNTER_FOUR_STEP = 0x00;
        // Five-step mode (slower)
        let FRAME_COUNTER_FIVE_STEP = 0x80;
    }

    namespace joy {
        extern writeonly output @ 0x4016 : u8;
        extern const input1 @ 0x4016 : u8;
        extern const input2 @ 0x4017 : u8;
        
        namespace bit {
            let A = 0;
            let B = 1;
            let SELECT = 2;
            let START = 3;
            let UP = 4;
            let DOWN = 5;
            let LEFT = 6;
            let RIGHT = 7;

            let BUTTON_START = 0;
            let BUTTON_COUNT = 4;
            let DIRECTION_START = 4;
            let DIRECTION_COUNT = 4;

            let COUNT = 8;
        }

        namespace mask {
            let A = 0x01;
            let B = 0x02;
            let SELECT = 0x04;
            let START = 0x08;
            let UP = 0x10;
            let DOWN = 0x20;
            let LEFT = 0x40;
            let RIGHT = 0x80;

            let BUTTONS = 0x0F;
            let DIRECTIONS = 0xF0;
            let ALL = 0xFF;
        }
    }

    namespace mmc1 {
        // The MMC1 implements its mapper interface through a 5-bit shift register.
        // Writing must send each bit one-by-one in the lowest bit of the port.
        // After the fifth bit is transferred, the data gets sent to the approriate internal register of the mapper.
        // For convenience, you can use the inline write macros below.

        // Control port (5-bit shift register).
        extern writeonly control @ 0x8000 : u8;
        // One-screen mirroring mode A (lower bank)
        let CONTROL_MIRROR_ONESCREEN_A = 0x00;
        // One-screen mirroring mode B (upper bank)
        let CONTROL_MIRROR_ONESCREEN_B = 0x01;
        // Vertical mirroring.
        let CONTROL_MIRROR_VERTICAL = 0x02;
        // Horizontal mirroring.
        let CONTROL_MIRROR_HORIZONTAL = 0x03;
        // PRG mode 0, 1: 0x8000 .. 0xFFFF - swappable 32K bank
        let CONTROL_PRG_MODE_32K = 0x00;
        // PRG mode 2: 0x8000 .. 0xBFFF - swappable 16K bank, 0xC000 .. 0xFFFF - fixed 16K bank.
        let CONTROL_PRG_MODE_16K_LOW_SWAP_HIGH_FIX = 0x08;
        // PRG mode 3: 0x8000 .. 0xBFFF - fixed 16K bank, 0xC000 .. 0xFFFF - swappable 16K bank.
        let CONTROL_PRG_MODE_16K_LOW_FIX_HIGH_SWAP = 0x0C;
        // CHR mode 0: 0x0000 .. 0x2000 - one swappable 8K bank
        let CONTROL_CHR_MODE_8K = 0x00;
        // CHR mode 0: 0x0000 .. 0x1000, 0x1000 .. 0x2000 - two swappable 4K banks
        let CONTROL_CHR_MODE_4K = 0x10;
        // Resets the shift register and resets control port to CONTROL_PRG_MODE_16K_LOW_FIX_HIGH_SWAP.
        let CONTROL_RESET = 0x80;

        // CHR bank select A (5-bit shift register).
        // Selects CHR bank at PPU 0x0000 .. 0x1000 (in 4K CHR mode; 5-bit index) / 0x0000 .. 0x2000 (in 8K CHR mode; 5-bit index with lowest bit ignored)        
        extern writeonly chr_a @ 0xA000 : u8;
        // CHR bank select B (5-bit shift register).
        // Select CHR bank at PPU 0x1000 .. 0x2000 (in 4K CHR mode only; 5-bit index).
        extern writeonly chr_b @ 0xC000 : u8;
        // Mask of possible CHR bank values.
        let CHR_BANK_MASK = 0x0F;        

        // PRG bank select (5-bit shift register).
        extern writeonly prg @ 0xE000 : u8;
        // Mask of possible PRG ROM bank values.
        let PRG_ROM_BANK_MASK = 0x0F;
        // Enable reading PRG RAM at 0x6000 .. 0x7FFF
        let PRG_RAM_ENABLE = 0x10;

        // Reset the MMC1 shift register to its initial state.
        // Modifies: a
        inline func reset() {
            control = a = CONTROL_RESET;
        }

        // Write a 5-bit value to the control register.
        // Arguments: a = the value to write
        // See: CONTROL constants
        inline func write_control(value : u8 in a) {
            inline for in 1 .. 5 { control = a; a >>>= 1; }
        }

        // Write a 5-bit value to the PRG select register.
        // Arguments: a = the value to write
        // See: PRG constants
        inline func write_prg(value : u8 in a) {
            inline for in 1 .. 5 { prg = a; a >>>= 1; }
        }

        // Write a 5-bit value to the lower CHR select register.
        // Arguments: a = the value to write
        // See: CHR constants
        inline func write_chr_a(value : u8 in a) {
            inline for in 1 .. 5 { chr_a = a; a >>>= 1; }
        }

        // Write a 5-bit value to the upper CHR select register.
        // Arguments: a = the value to write
        // See: CHR constants
        inline func write_chr_b(value : u8 in a) {
            inline for in 1 .. 5 { chr_b = a; a >>>= 1; }
        }
    }

    namespace mmc3 {
        namespace irq {
            // This register specifies the IRQ counter reload value.
            // When the IRQ counter is zero (or a reload is requested through 0xC001),
            // this value will be copied into the MMC3 IRQ counter at
            // the end of the current scanline
            extern writeonly latch @ 0xC000 : u8;
            
            // Writing any value to this register clears the MMC3 IRQ counter
            // so that it will be reloaded at the end of the current scanline.
            extern writeonly reload @ 0xC001 : u8;
            
            // Writing any value to this register will disable MMC3 interrupts
            // AND acknowledge any pending interrupts.
            extern writeonly disable @ 0xE000 : u8;
            
            // Writing any value to this register will enable MMC3 interrupts.
            extern writeonly enable @ 0xE001 : u8;
        }
        
        // Bank select register.
        extern writeonly select @ 0x8000 : u8;
        // Select 2K CHR bank A at PPU 0x0000 .. 0x07FF (CHR mode 0) / 0x1000 .. 0x17FF (CHR mode 1)
        let SELECT_2K_CHR_BANK_A = 0x00;
        // Select 2K CHR bank B at PPU 0x0800 .. 0x0FFF (CHR mode 0) / 0x1800 .. 0x1FFF (CHR mode 1)
        let SELECT_2K_CHR_BANK_B = 0x01;
        // Select 1K CHR bank A at PPU 0x1000 .. 0x13FF (CHR mode 0) / 0x0000 .. 0x03FF (CHR mode 1)
        let SELECT_1K_CHR_BANK_A = 0x02;
        // Select 1K CHR bank B at PPU 0x1400 .. 0x17FF (CHR mode 0) / 0x0400 .. 0x07FF (CHR mode 1)
        let SELECT_1K_CHR_BANK_B = 0x03;
        // Select 1K CHR bank C at PPU 0x1800 .. 0x1BFF (CHR mode 0) / 0x0800 .. 0x0BFF (CHR mode 1)
        let SELECT_1K_CHR_BANK_C = 0x04;
        // Select 1K CHR bank D at PPU 0x1C00 .. 0x1FFF (CHR mode 0) / 0x0C00 .. 0x0FFF (CHR mode 1)
        let SELECT_1K_CHR_BANK_D = 0x05;
        // Select 8K CHR bank A at CPU 0x8000 .. 0x9FFF (PRG mode 0) / 0xC000 .. 0xDFFF (PRG mode 1)
        let SELECT_8K_PRG_BANK_A = 0x06;
        // Select 8K CHR bank B at CPU 0xA000 .. 0xBFFF
        let SELECT_8K_PRG_BANK_B = 0x07;
        // PRG mode 0: 0x8000 .. 0x9FFF - swappable, 0xC000 .. 0xDFFF - fixed to second-last bank.
        let SELECT_PRG_MODE_0 = 0x00;
        // PRG mode 1: 0xC000 .. 0xDFFF - swappable, 0x8000 .. 0x9FFF - fixed to second-last bank.
        let SELECT_PRG_MODE_1 = 0x40;
        // CHR mode 0: 0x0000 .. 0x0FFF - two 2K banks, 0x1000 .. 0x1FFF - four 1K banks.
        let SELECT_CHR_MODE_0 = 0x00;
        // CHR mode 1: 0x0000 .. 0x0FFF - four 1K banks, 0x1000 .. 0x1FFF - two 2K banks.
        let SELECT_CHR_MODE_1 = 0x80;

        // Bank value to write, based on last value written to bank select register.
        extern writeonly data @ 0x8001 : u8;

        // Nametable mirroring setting.
        extern writeonly mirror @ 0xA000 : u8;
        // Vertical mirroring.
        let MIRROR_VERTICAL = 0x0;
        // Horizontal mirroring.
        let MIRROR_HORIZONTAL = 0x1;

        // Controls access to the WRAM.
        extern writeonly prg_ram_control @ 0xA001 : u8;
        // Disable writing RAM at 0x6000 .. 0x7FFF
        let PRG_RAM_CONTROL_DISABLE_WRITE = 0x40;
        // Enable reading RAM at 0x6000 .. 0x7FFF
        let PRG_RAM_CONTROL_ENABLE = 0x80;
    }

    namespace mmc6 {
        namespace irq {
            // This register specifies the IRQ counter reload value.
            // When the IRQ counter is zero (or a reload is requested through 0xC001),
            // this value will be copied into the MMC3 IRQ counter at
            // the end of the current scanline
            extern writeonly latch @ 0xC000 : u8;
            
            // Writing any value to this register clears the MMC3 IRQ counter
            // so that it will be reloaded at the end of the current scanline.
            extern writeonly reload @ 0xC001 : u8;
            
            // Writing any value to this register will disable MMC3 interrupts
            // AND acknowledge any pending interrupts.
            extern writeonly disable @ 0xE000 : u8;
            
            // Writing any value to this register will enable MMC3 interrupts.
            extern writeonly enable @ 0xE001 : u8;
        }

        extern writeonly select @ 0x8000 : u8;
        // Select 2K CHR bank A at PPU 0x0000 .. 0x07FF (CHR mode 0) / 0x1000 .. 0x17FF (CHR mode 1)
        let SELECT_2K_CHR_BANK_A = 0x00;
        // Select 2K CHR bank B at PPU 0x0800 .. 0x0FFF (CHR mode 0) / 0x1800 .. 0x1FFF (CHR mode 1)
        let SELECT_2K_CHR_BANK_B = 0x01;
        // Select 1K CHR bank A at PPU 0x1000 .. 0x13FF (CHR mode 0) / 0x0000 .. 0x03FF (CHR mode 1)
        let SELECT_1K_CHR_BANK_A = 0x02;
        // Select 1K CHR bank B at PPU 0x1400 .. 0x17FF (CHR mode 0) / 0x0400 .. 0x07FF (CHR mode 1)
        let SELECT_1K_CHR_BANK_B = 0x03;
        // Select 1K CHR bank C at PPU 0x1800 .. 0x1BFF (CHR mode 0) / 0x0800 .. 0x0BFF (CHR mode 1)
        let SELECT_1K_CHR_BANK_C = 0x04;
        // Select 1K CHR bank D at PPU 0x1C00 .. 0x1FFF (CHR mode 0) / 0x0C00 .. 0x0FFF (CHR mode 1)
        let SELECT_1K_CHR_BANK_D = 0x05;
        // Select 8K CHR bank A at CPU 0x8000 .. 0x9FFF (PRG mode 0) / 0xC000 .. 0xDFFF (PRG mode 1)
        let SELECT_8K_PRG_BANK_A = 0x06;
        // Select 8K CHR bank B at CPU 0xA000 .. 0xBFFF
        let SELECT_8K_PRG_BANK_B = 0x07;
        // Enable PRG RAM.
        let SELECT_PRG_RAM_ENABLE = 0x20;
        // PRG mode 0: 0x8000 .. 0x9FFF - swappable, 0xC000 .. 0xDFFF - fixed to second-last bank.
        let SELECT_PRG_MODE_0 = 0x00;
        // PRG mode 1: 0xC000 .. 0xDFFF - swappable, 0x8000 .. 0x9FFF - fixed to second-last bank.
        let SELECT_PRG_MODE_1 = 0x40;
        // CHR mode 0: 0x0000 .. 0x0FFF - two 2K banks, 0x1000 .. 0x1FFF - four 1K banks.
        let SELECT_CHR_MODE_0 = 0x00;
        // CHR mode 1: 0x0000 .. 0x0FFF - four 1K banks, 0x1000 .. 0x1FFF - two 2K banks.
        let SELECT_CHR_MODE_1 = 0x80;

        // New bank value, based on last value written to bank select register
        extern writeonly data @ 0x8001 : u8;

        // Nametable mirroring setting.
        extern writeonly mirror @ 0xA000 : u8;
        let MIRROR_VERTICAL = 0x0;
        let MIRROR_HORIZONTAL = 0x1;

        // Controls access to the WRAM.
        extern writeonly prg_ram_control @ 0xA001 : u8;
        // Enable writing RAM at 0x7000 .. 0x71FF. (Must enable read bit too if writing.)
        let PRG_RAM_CONTROL_ENABLE_WRITE_L = 0x10;
        // Enable reading RAM at 0x7000 .. 0x71FF.
        let PRG_RAM_CONTROL_ENABLE_READ_L = 0x20;
        // Enable writing RAM at 0x7100 .. 0x72FF. (Must enable read bit too if writing.)
        let PRG_RAM_CONTROL_ENABLE_WRITE_H = 0x40;
        // Enable reading RAM at 0x7100 .. 0x72FF.
        let PRG_RAM_CONTROL_ENABLE_READ_H = 0x80;
    }
}