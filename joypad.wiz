
import "nes";
import "define";

namespace joypad {

	in zeropage {
		var joy1, joy2 : u8;
	}

	inline func pool_both () {
		// latch the controllers
		nes.joy.output = a = 1;
		nes.joy.output = a = 0;

		joy1 = a = pool(0);
		joy2 = a = pool(1);
	}

	in program {

		// read a joypad
		func pool (port : u8 in y) : u8 in a {
			// no need to reset b0 because bits in 
			// b0 will be completely erased anyway

			// count down to 0
			for x in nes.joy.bit.COUNT .. 1 by -1 {

				// LSR: push bit 0 of input into the carry
				a = (&nes.joy.input1)[port] >>> 1;

				// ROR: pull carry into bit 7 of target
				b0 >>>>#= 1; // ROR = ">>>>#"
			}
			return b0;
		}

		// get horizontal direction for a joypad
		func to_horizontal (joy : u8 in b0) : u8 in x {
			x = 0;
			// BIT '$' only support bits 7 and 6
			if joy$nes.joy.bit.LEFT  {--x;}
			if joy$nes.joy.bit.RIGHT {++x;}
			return x;
		}

		// get vertical direction for a joypad
		func to_vertical (joy : u8 in b0) : u8 in y {
			y = 0;
			if {a = joy & nes.joy.mask.UP  ;} && !zero {--y;}
			if {a = joy & nes.joy.mask.DOWN;} && !zero {++y;}
			return y;
		}
	}
	
	// if we need to compare the state of button overtime
	in RAM {
		var prev1, prev2 : u8;
		var just_pressed, just_released : u8;
	}

	inline func prepare_input () {
		prev1 = a = joy1;
		prev2 = a = joy2;
	}

	inline func update_input () {
		just_pressed  = a = ~prev1 & joy1;
		just_released = a = ~joy1  & prev1;
	}

}