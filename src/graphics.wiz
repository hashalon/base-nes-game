/**
 * Handle palette
 */

import "src/nes";
import "src/define";
import "src/video";

namespace graphics {
    
    in zeropage {

    }

    in program {

        //const TEST : [u8] = [0x01, 0x16, 0x30];
        //func load_palette () {
        //    video.set_ppu_address(nes.ppu.ADDRESS_PALETTE_DATA + 1);
        //    video.write_array_in_ppu(TEST, 3);
        //}

                // fill a whole nametable with a given tile
        func fill_nametable (tile : u8 in b0, pal : u8 in b1) {
            // 1st part tilemap
            a = tile;
            for x in >:nes.ppu.NAMETABLE_SIZE_TILE_MAP .. 1 by -1 {
                for y in 0 .. 0xff {
                    nes.ppu.data = a;
                }
            }
            // 2nd part tilemap
            for x in <:nes.ppu.NAMETABLE_SIZE_TILE_MAP .. 1 by -1 {
                nes.ppu.data = a;
            }
            // attribute map
            a = pal;
            for x in nes.ppu.NAMETABLE_SIZE_ATTRIBUTE_MAP .. 1 by -1 {
                nes.ppu.data = a;
            }
        }

        // draw a metasprite on the screen
        // set x to zero before calling this function the first time
        // then it can be called multiple consecutive times
        func draw_metasprite (
            def  :*u8 in p0, 
            size : u8 in b2, 
            posx : u8 in b3, 
            posy : u8 in b4
        ) {
            // use 'x' to keep track of the sprite to edit
            // x = 0; // only before the first call
            y = 0;
            do {
                oam_buffer[x++] = a = def[y++] + posy;
                oam_buffer[x++] = a = def[y++];
                oam_buffer[x++] = a = def[y++];
                oam_buffer[x++] = a = def[y++] + posx;
            } while y < size;
        }
    }
}