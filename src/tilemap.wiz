import "src/nes";
import "src/define";
import "src/video";

namespace tilemap {

    /**
    * Metatile  is composed of 17 Bytes (4 * 4 tiles + 1 attribute)
    * Metatable is composed of 64 Bytes (8 * 8 metatiles)
    */

    in program {

        /**
        * Each metatile is composed of four rows.
        * To optimize drawing, we draw an array of metatiles at once and rows by rows.
        */


        // define the starting point of each metatables
        let METATABLE_0 = 0x00;
        let METATABLE_1 = 0x40;
        let METATABLE_2 = 0x80;
        let METATABLE_3 = 0xC0;

        let METATABLE_WIDTH  = 8;
        let METATABLE_HEIGHT = 8;
        let METATABLE_SIZE   = 0x40;
        let METATILE_WIDTH   = 4;
        let METATILE_HEIGHT  = 4;
        let METATILE_SIZE    = 0x10;


        // draw a group of metatiles
        func draw_metatiles (pos : u8 in b8, array : *u8 in p0, size : u8 in b2) {

            // compute the high address of the nametable
            var table_high @ &b9 : u8;
            table_high = a = (pos >>> 4) + >:nes.ppu.ADDRESS_NAMETABLE_DATA;
            
            // address of the nametable to write to
            let TABLE_MASK = nes.ppu.NAMETABLE_WIDTH_TILE_MAP - 1;

            var table_addr @ &pA : *u8;
            >:table_addr = a = (pos >>> T8) + table_high;
            <:table_addr = a = (pos <<< T4) & TABLE_MASK;

            // draw each row of the metatile array into the ppu
            for x in 0 .. METATILE_HEIGHT - 1 {

                // prepare the ppu address
                a = nes.ppu.status;
                nes.ppu.address = a = (x <<< T32) + >:table_addr;
                nes.ppu.address = a =               <:table_addr;

                // draw a row of the metatile array
                _draw_metatile_row(array, size, a = x <<< T4);
            }

            // set the attribute address
            let ATTR_OFFSET = nes.ppu.NAMETABLE_OFFSET_ATTRIBUTE_MAP;
            let ATTR_MASK   = nes.ppu.NAMETABLE_SIZE_ATTRIBUTE_MAP - 1;

            a = nes.ppu.status;
            nes.ppu.address = a = table_high        + >:ATTR_OFFSET;
            nes.ppu.address = a = (pos & ATTR_MASK) + <:ATTR_OFFSET;

            // write the attribute data afterward
            x = 0;
            do {
                y = a = x++;
                y = a = array[y];
                nes.ppu.data = a = metatiles_pal[y];
            } while x < size;
        }


        // draw a single line of the metatile
        func _draw_metatile_row (array : *u8 in p0, size : u8 in b2, row : u8 in b3) {

            // store the address of the metatile to write
            var meta_addr @ &p4 : *u8;
            var meta_indx @ &b6 :  u8;
            var tmp       @ &b7 :  u8;

            // for each metatile in the array
            y = 0;
            do {

                // find the metatile definition address
                a = array[y++];
                if a != meta_indx {
                    // compute the new address if the metatile is different
                    meta_indx = a;
                    >:meta_addr = a = (meta_indx >>> 4) + >:&metatiles;
                    <:meta_addr = a = (meta_indx <<< 4) + row;
                }

                // draw four tiles
                tmp = y;
                for y in 0 .. METATILE_WIDTH - 1 {
                    nes.ppu.data = a = meta_addr[y];
                }
                y = tmp;

            } while y < size;
        }


        // fill a whole nametable with a given tile
        func fill_nametable (tile : u8 in b0, pal : u8 in b1) {
            // 1st part tilemap
            a = tile;
            for x in >:nes.ppu.NAMETABLE_SIZE_TILE_MAP .. 1 by -1 {
                for y in 0 .. 0xff {
                    nes.ppu.data = a;
                }
            }
            // 2nd part tilemap
            for x in <:nes.ppu.NAMETABLE_SIZE_TILE_MAP .. 1 by -1 {
                nes.ppu.data = a;
            }
            // attribute map
            a = pal;
            for x in nes.ppu.NAMETABLE_SIZE_ATTRIBUTE_MAP .. 1 by -1 {
                nes.ppu.data = a;
            }
        }

    }
}