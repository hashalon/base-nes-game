/**
 * Define base memory layout
 */

// Specify that the target system is the NES
config {
	format          = "nes" ,
    battery         = false ,
	vertical_mirror = true  ,
	cart_type       = "mmc3", // mapper for per-scanline scrolling
}

import "src/nes";

/**
 * vardata           : uninitialized RAM
 * prgdata/constdata : program and constants (cannot be written to)
 * chrdata           : store tiles (NES specific)
 * varinitdata       : initialized RAM
 * */

bank zeropage  @ 0x0000 : [vardata; 0x0100]; // for variables
bank stack     @ 0x0100 : [vardata; 0x0100]; // for stack
bank oam       @ 0x0200 : [vardata; 0x0100]; // for sprites
bank ram       @ 0x0300 : [vardata; 0x0500]; // ...
bank program   @ 0x8000 : [prgdata; 0x8000]; // for instructions & constants
bank chr                : [chrdata; 0x2000]; // for graphics

in zeropage {

	// 16 Bytes of temporary variables to work with
	var b0, b1, b2, b3, b4, b5, b6, b7 : u8;
	var b8, b9, bA, bB, bC, bD, bE, bF : u8;

	// map the 16 Bytes with words and pointers of 16 bits
	var w0 @ &b0, w2 @ &b2, w4 @ &b4, w6 @ &b6 : u16;
	var w8 @ &b8, wA @ &bA, wC @ &bC, wE @ &bE : u16;
	var p0 @ &b0, p2 @ &b2, p4 @ &b4, p6 @ &b6 : *u8;
	var p8 @ &b8, pA @ &bA, pC @ &bC, pE @ &bE : *u8;

	// save the state of registers while executing interrupts
	var tmp_a, tmp_x, tmp_y : u8;
}

in oam {
	var oam_buffer : [u8; 0x100];
}

in program {
	const metatiles @ 0xF000 = embed "res/metatiles.bin";
	const metatiles_pal      = embed "res/metatiles_palette.bin";
}

in chr {
	const = embed "res/bg-tiles.chr";
	const = embed "res/fg-tiles.chr";
}

// specify that something should be OFF
let OFF = 0;

// push the registers on the stack to switch context
inline func push_registers () {
    push(a);
    push(a = x);
    push(a = y);
}

// pop the registers from the stack to resume previous execution
inline func pop_registers () {
    y = a = pop();
    x = a = pop();
    a = pop();
}

// save registers in memory to execute interrupt
inline func save_registers () {
	tmp_a = a;
	tmp_x = x;
	tmp_y = y;
}

// load registers from memory after executing interrupt
inline func load_registers () {
	a = tmp_a;
	x = tmp_x;
	y = tmp_y;
}


// assign a 16bit word in the appropriate location
inline func assign (let target : *u8, let value : u16) {
    <:target = a = <:value;
    >:target = a = >:value;
}

