/**
 * Define base memory layout
 */

// Specify that the target system is the NES
config {
	format          = "nes" ,
    battery         = false ,
	vertical_mirror = true  ,
	cart_type       = "mmc3", // mapper for per-scanline scrolling
}

import "src/nes";

/**
 * vardata           : uninitialized RAM
 * prgdata/constdata : program and constants (cannot be written to)
 * chrdata           : store tiles (NES specific)
 * varinitdata       : initialized RAM
 * */

bank zeropage  @ 0x0000 : [vardata; 0x0100]; // for variables
bank stack     @ 0x0100 : [vardata; 0x0100]; // for stack
bank oam       @ 0x0200 : [vardata; 0x0100]; // for sprites
bank ram       @ 0x0300 : [vardata; 0x0500]; // ...
bank program   @ 0x8000 : [prgdata; 0x8000]; // for instructions & constants
bank chr                : [chrdata; 0x2000]; // for graphics

in zeropage {

	// 16 Bytes of temporary variables to work with
	var b0, b1, b2, b3, b4, b5, b6, b7 : u8;
	var b8, b9, bA, bB, bC, bD, bE, bF : u8;

	// map the 16 Bytes with words and pointers of 16 bits
	var w0 @ &b0, w2 @ &b2, w4 @ &b4, w6 @ &b6 : u16;
	var w8 @ &b8, wA @ &bA, wC @ &bC, wE @ &bE : u16;
	var p0 @ &b0, p2 @ &b2, p4 @ &b4, p6 @ &b6 : *u8;
	var p8 @ &b8, pA @ &bA, pC @ &bC, pE @ &bE : *u8;


	// save the state of registers while executing interrupts
	var tmp_a, tmp_x, tmp_y : u8;
}

in oam {
	var oam_buffer : [u8; 0x100];
}

in program {
	const metatiles @ 0xF000 = embed "res/metatiles.bin";
	const metatiles_pal      = embed "res/metatiles_palette.bin";
}

in chr {
	const = embed "res/bg-tiles.chr";
	const = embed "res/fg-tiles.chr";
}

// specify that something should be OFF
let OFF = 0;

// used to perform products or divides by power of two
let T2   = 1;
let T4   = 2;
let T8   = 3;
let T16  = 4;
let T32  = 5;
let T64  = 6;
let T128 = 7;
let T256 = 8;


// push the registers on the stack to switch context
inline func push_registers () {
    push(a);
    push(a = x);
    push(a = y);
}

// pop the registers from the stack to resume previous execution
inline func pop_registers () {
    y = a = pop();
    x = a = pop();
    a = pop();
}

// store registers in memory to execute interrupt
inline func store_registers () {
	tmp_a = a;
	tmp_x = x;
	tmp_y = y;
}

// load registers from memory after executing interrupt
inline func load_registers () {
	a = tmp_a;
	x = tmp_x;
	y = tmp_y;
}


// assign a 16bit word in the appropriate location
inline func assign (let target : *u8, let value : u16) {
    <:target = a = <:value;
    >:target = a = >:value;
}


namespace math {
	in program {
		// define a sine over a period of 2PI
		// could be to a period of PI/2 actually
		const sine_array : [u8] = [
			  0,   3,   6,   9,  12,  16,  19,  22,  25,  28,  31,  34,  37,  40,  43,  46, 
			 49,  51,  54,  57,  60,  63,  65,  68,  71,  73,  76,  78,  81,  83,  85,  88, 
			 90,  92,  94,  96,  98, 100, 102, 104, 106, 107, 109, 111, 112, 113, 115, 116, 
			117, 118, 120, 121, 122, 122, 123, 124, 125, 125, 126, 126, 126, 127, 127, 127
		];

		// return a sine value
		func sine (ai : u8 in a): i8 in a {
			b0 = ai;
			ai &= 0b00111111;
			if b0$6 {
				b1 = ai;
				ai = 0b00111111 - b1;
			}
			ai = sine_array[x = ai];
			if b0$7 {ai |= 0b10000000;}
			return ai;
		}
	}
}
