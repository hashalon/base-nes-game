
import "src/nes";
import "src/define";

namespace joypad {

	in zeropage {
		var joy1, joy2 : u8;
	}

	in ram {
		var press1, press2 : u8;
	}

	// pool the state of both joypads
	inline func update () {

		// store previous state
		var prev1 @ &b1 : u8;
		var prev2 @ &b2 : u8;
		prev1 = a = joy1;
		prev2 = a = joy2;

		// pool each button input of each joypad
		nes.joy.output = a = 1;
		nes.joy.output = a = 0;
		joy1 = a = pool(0);
		joy2 = a = pool(1);

		// deduce the button that have been just pressed
		press1 = a = ~prev1 & joy1;
		press2 = a = ~prev2 & joy2;
	}

	in program {

		// read a joypad
		func pool (port : u8 in y) : u8 in a {

			// store the result to return
			var result @ &b0 : u8;

			// no need to reset 'result' because its 
			// bits will be completely erased anyway

			// count down to 0
			for x in nes.joy.bit.COUNT .. 1 by -1 {

				// LSR: push bit 0 of input into the carry
				a = (&nes.joy.input1)[port] >>> 1;

				// ROR: pull carry into bit 7 of target
				result >>>>#= 1;
			}
			return result;
		}

		// get horizontal direction for a joypad
		func to_horizontal (joy : u8 in b0) : u8 in x {
			x = 0;
			// BIT '$' only support bits 7 and 6
			if joy$nes.joy.bit.LEFT  {--x;}
			if joy$nes.joy.bit.RIGHT {++x;}
			return x;
		}

		// get vertical direction for a joypad
		func to_vertical (joy : u8 in b0) : u8 in y {
			y = 0;
			if {a = joy & nes.joy.mask.UP  ;} && !zero {--y;}
			if {a = joy & nes.joy.mask.DOWN;} && !zero {++y;}
			return y;
		}
	}

}