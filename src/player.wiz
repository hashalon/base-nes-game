
import "src/nes";
import "src/define";
import "src/joypad";
import "src/timer";
import "src/physics";


namespace player {

    let COYOTE_TIME = (2 * 60) as u8;

    enum State : u8 {
        Airborne,
        Swimming,
        Sliding,
        Climbing,
        OnGround,
        OnWall,
        Hit,
    }

    struct Player {
        life  : u8,
        state : State,
    }

	in ram {
        var player1, player2 : Player;
	}

    inline func tick () {

        // update the first player
        if {a = joypad.press1 & nes.joy.mask.A;} && !zero {
            // player is on the ground -> jump
            // player just left the ground -> jump
            // player is in the air -> set the timer, he might touch the ground on the comming ticks
            
            if {a = timer1;} && !zero {

            } else {
                // 
                timer1 = a = JUMP_TIMER;
            }
        }
        if {a = joypad.press1 & nes.joy.mask.B;} && !zero {

        }

    }

	in program {
        
        // handle horizontal motion using player inputs
        func handle_motion(joy : u8 in b0, index : u8 in y) {
            let accel = physics.accelerations;
            let vel   = physics.velocities;

            // change the value of the acceleration
            accel[index] = a = x = joypad.to_horizontal(joy);
        }

		// read a joypad
		func pool () {

		}
	}

}